#!/usr/bin/with-contenv bash

set -u # Unset Variables are an error
set -e # Exit on error

CERT_DIR="/config/certs"
APP_NAME=${APP_NAME:-docker-base-image-gui}

# Ensure Folder Structure Exists
if [ ! -d "${CERT_DIR}" ]; then
	mkdir -p "${CERT_DIR}"
fi

chown -R "${PUID}":"${PGID}" "${CERT_DIR}"
chmod -R 0755 "${CERT_DIR}"

# Generate DH Parameters
if [ ! -f "${CERT_DIR}/dhparam.pem" ]; then
	log "$(basename $0)" "Generating DH Parameters (2048), this will take a while. . ."
	env HOME=/tmp s6-setuidgid "${PUID}":"${PGID}" openssl dhparam \
				-out "${CERT_DIR}/dhparam.pem" \
				2048 \
				> /dev/null 2>&1
fi

APP_NORMALIZE="$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"
CERT_INFO="/C=CA/O=github.com\\/chris102994\\/$APP_NORMALIZE/OU=$APP_NORMALIZE\CN=web.$APP_NORMALIZE.com"

# Generate NGINX cert
if [ ! -f "${CERT_DIR}/web-fullchain.pem" ] && [ ! -f "${CERT_DIR}/web-privkey.pem" ]; then
	log "$(basename $0)" "Generating self-signed certificate for NGINX, this will take a while. . ."
	env HOME=/tmp s6-setuidgid "${PUID}":"${PGID}" openssl req \
				-x509 \
				-nodes \
				-days 365 \
				-newkey rsa:2048 \
				-subj "${CERT_INFO}" \
				-keyout "${CERT_DIR}/web-privkey.pem" \
				-out "${CERT_DIR}/web-fullchain.pem" \
				> /dev/null 2>&1
fi

chmod 400 "${CERT_DIR}/web-privkey.pem"

# Generate VNC server cert
if [ ! -f "${CERT_DIR}/vnc-server.pem" ]; then
	log "$(basename $0) Generating self-signed certificate for VNC server, this will take a while. . ."
	TEMP_DIR="$(mktemp -d)"
	env HOME=/tmp openssl req \
				-x509 \
				-nodes \
				-days 365 \
				-newkey rsa:2048 \
				-subj "${CERT_INFO}" \
				-keyout "${TEMP_DIR}/web-privkey.pem" \
				-out "${TEMP_DIR}/cert.pem" \
				> /dev/null 2>&1
	cat "${TEMP_DIR}/web-privkey.pem" \
		"${TEMP_DIR}/cert.pem" \
		"${CERT_DIR}/dhparam.pem" \
		> "${CERT_DIR}/vnc-server.pem"
	rm -rf "${TEMP_DIR}"
fi

chmod 400 "${CERT_DIR}/vnc-server.pem"
chown "${PUID}":"${PGID}" "${CERT_DIR}/vnc-server.pem"
